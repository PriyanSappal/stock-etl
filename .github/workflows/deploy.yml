name: CD

on:
  push:
    branches:
      - main   # runs only when code is pushed to main

jobs:
  deploy-infra:
    runs-on: ubuntu-latest

    permissions:
      id-token: write   # needed for OIDC
      contents: read    # to checkout code
    
    env:
      # Already added secrets
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
      TF_VAR_db_name: ${{ secrets.DB_NAME }}
      TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_api_provider: ${{ secrets.API_PROVIDER }}
      TF_VAR_symbol: ${{ secrets.SYMBOL }}
      TF_VAR_api_key: ${{ secrets.API_KEY }}
      TF_VAR_grafana_user: ${{ secrets.GRAFANA_USER }}
      TF_VAR_grafana_pass: ${{ secrets.GRAFANA_PASS }}
      # Optional: non-sensitive variables (can use defaults)
      TF_VAR_environment: dev
      TF_VAR_allowed_cidr: 0.0.0.0/0
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Terraform Init
        run: terraform init
        working-directory: infra

      - name: Terraform Format Check
        run: terraform fmt -recursive
        working-directory: infra

      - name: Terraform Validate
        run: terraform validate \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "bucket_name=${{ secrets.BUCKET_NAME }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "db_username=${{ secrets.DB_USERNAME }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "api_provider=${{ secrets.API_PROVIDER }}" \
            -var "symbol=${{ secrets.SYMBOL }}" \
            -var "api_key=${{ secrets.API_KEY }}" \
            -var "grafana_user=${{ secrets.GRAFANA_USER }}" \
            -var "grafana_pass=${{ secrets.GRAFANA_PASS }}" \
            -var "environment=dev" \
            -var "allowed_cidr=0.0.0.0/0"
        working-directory: infra

      - name: Terraform Plan
        run: terraform plan -out=tfplan \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "bucket_name=${{ secrets.BUCKET_NAME }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "db_username=${{ secrets.DB_USERNAME }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "api_provider=${{ secrets.API_PROVIDER }}" \
            -var "symbol=${{ secrets.SYMBOL }}" \
            -var "api_key=${{ secrets.API_KEY }}" \
            -var "grafana_user=${{ secrets.GRAFANA_USER }}" \
            -var "grafana_pass=${{ secrets.GRAFANA_PASS }}" \
            -var "environment=dev" \
            -var "allowed_cidr=0.0.0.0/0"
        working-directory: infra

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "bucket_name=${{ secrets.BUCKET_NAME }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "db_username=${{ secrets.DB_USERNAME }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "api_provider=${{ secrets.API_PROVIDER }}" \
            -var "symbol=${{ secrets.SYMBOL }}" \
            -var "api_key=${{ secrets.API_KEY }}" \
            -var "grafana_user=${{ secrets.GRAFANA_USER }}" \
            -var "grafana_pass=${{ secrets.GRAFANA_PASS }}" \
            -var "environment=dev" \
            -var "allowed_cidr=0.0.0.0/0"
        working-directory: infra
